---
# =====================================
# ROL: PROVISION - CLONAR REPOSITORIOS
# Descripción: Clona repositorios y construye imágenes Docker localmente
# =====================================

# Crear directorio del proyecto si no existe
- name: Asegurar que existe el directorio del proyecto
  file:
    path: "{{ project_root }}"
    state: directory
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0755'

# Verificar si es un despliegue local (los archivos ya existen)
- name: Verificar si es un despliegue local
  stat:
    path: "{{ project_root }}/docker-compose.yml"
  register: docker_compose_exists
  
# Verificar si el archivo .env ya existe (solo si use_env_file es true)
- name: Verificar si el archivo .env ya existe
  stat:
    path: "{{ project_root }}/.env"
  register: env_file_exists
  when: use_env_file | default(true)

# Extraer información de repositorios desde la definición de servicios
- name: Extraer información de repositorios desde servicios
  set_fact:
    effective_repos: "{{ service_repos | default([]) }}"
  tags:
    - provision
    - clone

# Mostrar información de los repositorios que se clonarán
- name: Mostrar información de los repositorios
  debug:
    msg: "Se procesarán {{ effective_repos | length }} repositorios: {{ effective_repos | map(attribute='name') | list }}"
  tags:
    - provision
    - clone

# Verificar que hay repositorios para clonar
- name: Verificar que hay repositorios para clonar
  fail:
    msg: "No hay repositorios definidos para clonar. Asegúrate de definir service_repos en tu playbook cuando clone_repos es true."
  when: effective_repos | length == 0
  tags:
    - provision
    - clone

# --- COMÚN PARA AMBOS FLUJOS: CLONAR REPOSITORIOS ---
# Clonar o actualizar repositorios
- name: Procesar repositorios de servicios
  block:
    # Verificar si el repositorio ya existe
    - name: Verificar si el repositorio ya está clonado
      stat:
        path: "{{ project_root }}/{{ item.name }}/.git"
      register: repo_stat
      loop: "{{ effective_repos }}"
      loop_control:
        label: "{{ item.name }}"

    # Mostrar estado de los repositorios (para depuración)
    - name: Mostrar estado de los repositorios
      debug:
        msg: "Repositorio {{ item.item.name }}: {{ 'ya existe' if item.stat.exists else 'no existe' }}"
        verbosity: 1
      loop: "{{ repo_stat.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    # Clonar repositorio si no existe
    - name: Clonar repositorios que no existen
      git:
        repo: "{{ item.item.url }}"
        dest: "{{ project_root }}/{{ item.item.name }}"
        version: "{{ item.item.branch | default('main') }}"
      when: not item.stat.exists
      loop: "{{ repo_stat.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      register: clone_result

    # Actualizar repositorio si ya existe
    - name: Actualizar repositorios existentes
      git:
        repo: "{{ item.item.url }}"
        dest: "{{ project_root }}/{{ item.item.name }}"
        version: "{{ item.item.branch | default('main') }}"
        update: yes
        force: yes
      when: item.stat.exists
      loop: "{{ repo_stat.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      register: update_result
  tags:
    - provision
    - clone

# --- SOLO PARA DESPLIEGUE EN NUBE: COPIAR ARCHIVOS ---
# Estas tareas solo se ejecutan en el flujo de despliegue en nube
- block:
    # Copiar el docker-compose.yml existente
    - name: Copiar docker-compose.yml existente
      copy:
        src: "{{ local_files_dir }}/docker-compose.yml"
        dest: "{{ project_root }}/docker-compose.yml"
        owner: "{{ ansible_user_id | default('ubuntu') }}"
        group: "{{ ansible_user_id | default('ubuntu') }}"
        mode: '0644'
      when: local_files_dir is defined
      tags:
        - provision
        - clone
        - docker

    # Copiar archivos adicionales
    - name: Copiar archivos adicionales si existen
      copy:
        src: "{{ local_files_dir }}/{{ item }}"
        dest: "{{ project_root }}/{{ item }}"
        owner: "{{ ansible_user_id | default('ubuntu') }}"
        group: "{{ ansible_user_id | default('ubuntu') }}"
        mode: '0644'
      loop: "{{ additional_files | default([]) }}"
      ignore_errors: yes  # Continuar si algún archivo no existe
      when:
        - additional_files is defined
        - local_files_dir is defined
      tags:
        - provision
        - clone
        - docker

    # Creación del archivo .env solo si use_env_file es true
    - block:
        - name: Crear archivo .env con rutas locales y variables de entorno
          copy:
            dest: "{{ project_root }}/.env"
            content: |
              # Rutas a los repositorios locales
              {% for repo in effective_repos %}
              {{ repo.env_var | default(repo.name | upper + '_PATH') }}={{ project_root }}/{{ repo.name }}
              {% endfor %}
              
              {% if global_env_vars is defined %}
              # Variables globales
              {% for key, value in global_env_vars.items() %}
              {{ key }}={{ value }}
              {% endfor %}
              {% endif %}
              
              {% for service in services %}
              {% if service.env_vars is defined %}
              # Variables específicas por servicio
              # {{ service.name | capitalize }} Variables
              {% for key, value in service.env_vars.items() %}
              {{ key }}={{ value }}
              {% endfor %}
              {% endif %}
              {% endfor %}
              
            owner: "{{ ansible_user_id | default('ubuntu') }}"
            group: "{{ ansible_user_id | default('ubuntu') }}"
            mode: '0644'
          tags:
            - provision
            - clone
            - docker
      when: use_env_file | default(true)
  
  # Solo ejecutar este bloque si es un despliegue en nube (no existe docker-compose.yml)
  when: not docker_compose_exists.stat.exists
  tags:
    - provision
    - clone

# --- COMÚN PARA AMBOS FLUJOS: CONSTRUIR IMÁGENES Y LEVANTAR CONTENEDORES ---
# Construir imágenes si hubo cambios o se fuerza el build
- name: Construir imágenes Docker
  command: docker compose build
  args:
    chdir: "{{ project_root }}"
  when: >
    clone_result.changed | default(false) or 
    update_result.changed | default(false) or 
    force_build | default(false)
  tags:
    - provision
    - clone
    - docker

# Crear el archivo .env vacío si use_env_file es false (evita error de Docker)
- name: Crear .env vacío si use_env_file es false
  copy:
    dest: "{{ project_root }}/.env"
    content: ""
    owner: "{{ ansible_user_id | default('ubuntu') }}"
    group: "{{ ansible_user_id | default('ubuntu') }}"
    mode: '0644'
  when: not use_env_file | default(true)

# Levantar los contenedores
- name: Levantar contenedores con Docker Compose
  command: docker compose up -d
  args:
    chdir: "{{ project_root }}"
  changed_when: true
